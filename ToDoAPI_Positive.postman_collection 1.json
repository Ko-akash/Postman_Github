{
	"info": {
		"_postman_id": "fee78ff9-42fb-4866-9494-a850ed9b1bee",
		"name": "ToDoAPI_Positive",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32850282"
	},
	"item": [
		{
			"name": "Login and Get Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Response Time to be Below 2s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Validating Response Body is as per JSON Schema\", function () {\r",
							"    const responseJSON = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJSON).to.be.an('object');\r",
							"    pm.expect(responseJSON).to.have.property('username');\r",
							"    pm.expect(responseJSON).to.have.property('email');\r",
							"    pm.expect(responseJSON).to.have.property('firstName');\r",
							"    pm.expect(responseJSON).to.have.property('lastName');\r",
							"    pm.expect(responseJSON).to.have.property('gender');\r",
							"    pm.expect(responseJSON).to.have.property('image');\r",
							"    pm.expect(responseJSON).to.have.property('token');\r",
							"});\r",
							"\r",
							"var JsonToken = pm.response.json();\r",
							"pm.collectionVariables.set('Auth', JsonToken.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n     \"username\": \"kminchelle\",\r\n     \"password\": \"0lelplR\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_URL}}/auth/login",
					"host": [
						"{{Base_URL}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Current User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Response Time to be Below 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validating Response Body is as per JSON Schema\", function () {\r",
							"    const responseJSON = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJSON).to.be.an('object');\r",
							"    pm.expect(responseJSON).to.have.property('username');\r",
							"    pm.expect(responseJSON).to.have.property('email');\r",
							"    pm.expect(responseJSON).to.have.property('firstName');\r",
							"    pm.expect(responseJSON).to.have.property('lastName');\r",
							"    pm.expect(responseJSON).to.have.property('gender');\r",
							"    pm.expect(responseJSON).to.have.property('image');\r",
							"    pm.expect(responseJSON).to.have.property('id');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Auth}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base_URL}}/auth/me",
					"host": [
						"{{Base_URL}}"
					],
					"path": [
						"auth",
						"me"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All ToDos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJSON = pm.response.json();",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Validating Response Time to be Below 200s\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Validating Response Body is as per JSON Schema\", function () {",
							"    const responseJSON = pm.response.json();",
							"",
							"    pm.expect(responseJSON).to.be.an('object');",
							"    pm.expect(responseJSON).to.have.property('todos')",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTUsInVzZXJuYW1lIjoia21pbmNoZWxsZSIsImVtYWlsIjoia21pbmNoZWxsZUBxcS5jb20iLCJmaXJzdE5hbWUiOiJKZWFubmUiLCJsYXN0TmFtZSI6IkhhbHZvcnNvbiIsImdlbmRlciI6ImZlbWFsZSIsImltYWdlIjoiaHR0cHM6Ly9yb2JvaGFzaC5vcmcvSmVhbm5lLnBuZz9zZXQ9c2V0NCIsImlhdCI6MTcwODQyMTYyMSwiZXhwIjoxNzA4NDI1MjIxfQ.dpC_Gnu3hGypBU63cfS-h9eJosWsxjLcMyjMgABc9qk",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_URL}}/todos",
					"host": [
						"{{Base_URL}}"
					],
					"path": [
						"todos"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get a single Todo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validating Response Time to be Below 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_URL}}/todos/2",
					"host": [
						"{{Base_URL}}"
					],
					"path": [
						"todos",
						"2"
					],
					"query": [
						{
							"key": "id",
							"value": "3",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Random Todo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validating Response Time to be Below 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validating Response Body is as per JSON Schema\", function () {\r",
							"    const responseJSON = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJSON).to.be.an('object');\r",
							"    pm.expect(responseJSON).to.have.property('id');\r",
							"    pm.expect(responseJSON).to.have.property('todo');\r",
							"    pm.expect(responseJSON).to.have.property('completed');\r",
							"    pm.expect(responseJSON).to.have.property('userId');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_URL}}/todos/random",
					"host": [
						"{{Base_URL}}"
					],
					"path": [
						"todos",
						"random"
					]
				}
			},
			"response": []
		},
		{
			"name": "Limit Todos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Response Time to be Below 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validating Response Body is as per JSON Schema\", function () {\r",
							"    const responseJSON = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJSON).to.be.an('object');\r",
							"    pm.expect(responseJSON).to.have.property('total');\r",
							"    pm.expect(responseJSON).to.have.property('skip');\r",
							"    pm.expect(responseJSON).to.have.property('limit');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base_URL}}/todos?limit=3&skip=10",
					"host": [
						"{{Base_URL}}"
					],
					"path": [
						"todos"
					],
					"query": [
						{
							"key": "limit",
							"value": "3"
						},
						{
							"key": "skip",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Nodes via User Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validating Response Time to be Below 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validating Response Body is as per JSON Schema\", function () {\r",
							"    const responseJSON = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJSON).to.be.an('object');\r",
							"    pm.expect(responseJSON).to.have.property('todos');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Base_URL}}/todos/user/13",
					"host": [
						"{{Base_URL}}"
					],
					"path": [
						"todos",
						"user",
						"13"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add a New Todo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseBody = pm.response.json();\r",
							"\r",
							"pm.test(\"Response body contains ID\", function () {\r",
							"    pm.expect(responseBody).to.have.property('id');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating Response Time to be Below 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"todo\" : \"Go to the washroom on company time\",\r\n    \"completed\" : \"True\",\r\n    \"userId\"    : \"1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_URL}}/todos/add",
					"host": [
						"{{Base_URL}}"
					],
					"path": [
						"todos",
						"add"
					],
					"query": [
						{
							"key": "id",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a Todo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Validating Response Time to be Below 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"var responseData = pm.response.json();",
							"",
							"var expectedValue = \"False\"; ",
							"",
							"pm.test(\"Verify value in key\", function () {",
							"    pm.expect(responseData.completed).to.eql(expectedValue); ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"completed\" : \"False\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_URL}}/todos/25",
					"host": [
						"{{Base_URL}}"
					],
					"path": [
						"todos",
						"25"
					],
					"query": [
						{
							"key": "{{id}}",
							"value": "25",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a Todo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"var responseBody = pm.response.json();\r",
							"\r",
							"pm.test(\"Response body contains isDeleted and deletedOn Keys\", function () {\r",
							"    pm.expect(responseBody).to.have.property('isDeleted');\r",
							"    pm.expect(responseBody).to.have.property('deletedOn');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\" : 25\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_URL}}/todos/25",
					"host": [
						"{{Base_URL}}"
					],
					"path": [
						"todos",
						"25"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTUsInVzZXJuYW1lIjoia21pbmNoZWxsZSIsImVtYWlsIjoia21pbmNoZWxsZUBxcS5jb20iLCJmaXJzdE5hbWUiOiJKZWFubmUiLCJsYXN0TmFtZSI6IkhhbHZvcnNvbiIsImdlbmRlciI6ImZlbWFsZSIsImltYWdlIjoiaHR0cHM6Ly9yb2JvaGFzaC5vcmcvSmVhbm5lLnBuZz9zZXQ9c2V0NCIsImlhdCI6MTcwODQwODY5NiwiZXhwIjoxNzA4NDEyMjk2fQ.qM9Dc7vrsS2IvMegcJaoDDCsHjjD-rhl-_9L7wpp_Mk",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "151"
		},
		{
			"key": "Base_URL",
			"value": "https://dummyjson.com"
		},
		{
			"key": "Auth Token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTUsInVzZXJuYW1lIjoia21pbmNoZWxsZSIsImVtYWlsIjoia21pbmNoZWxsZUBxcS5jb20iLCJmaXJzdE5hbWUiOiJKZWFubmUiLCJsYXN0TmFtZSI6IkhhbHZvcnNvbiIsImdlbmRlciI6ImZlbWFsZSIsImltYWdlIjoiaHR0cHM6Ly9yb2JvaGFzaC5vcmcvSmVhbm5lLnBuZz9zZXQ9c2V0NCIsImlhdCI6MTcwODQwODY5NiwiZXhwIjoxNzA4NDEyMjk2fQ.qM9Dc7vrsS2IvMegcJaoDDCsHjjD-rhl-_9L7wpp_Mk",
			"type": "string"
		},
		{
			"key": "loginToken",
			"value": ""
		},
		{
			"key": "Auth",
			"value": ""
		}
	]
}